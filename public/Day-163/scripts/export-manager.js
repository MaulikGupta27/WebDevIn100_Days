
class ExportManager {
    constructor() {
        this.supportedFormats = ['txt', 'json', 'html'];
    }

    exportAsText(storyHistory, storyParams) {
        if (!storyHistory || storyHistory.length === 0) return;

        const content = this.generateTextContent(storyHistory, storyParams);
        const filename = this.generateFilename(storyParams, 'txt');
        
        this.downloadFile(content, filename, 'text/plain');
    }

    exportAsJSON(storyHistory, storyParams) {
        if (!storyHistory || storyHistory.length === 0) return;

        const data = {
            metadata: {
                characterName: storyParams?.characterName || 'Unknown Hero',
                theme: storyParams?.theme || 'fantasy',
                exportDate: new Date().toISOString(),
                totalChapters: storyHistory.length
            },
            story: storyHistory,
            parameters: storyParams
        };

        const content = JSON.stringify(data, null, 2);
        const filename = this.generateFilename(storyParams, 'json');
        
        this.downloadFile(content, filename, 'application/json');
    }

    exportAsHTML(storyHistory, storyParams) {
        if (!storyHistory || storyHistory.length === 0) return;

        const content = this.generateHTMLContent(storyHistory, storyParams);
        const filename = this.generateFilename(storyParams, 'html');
        
        this.downloadFile(content, filename, 'text/html');
    }

    generateTextContent(storyHistory, storyParams) {
        const characterName = storyParams?.characterName || 'Unknown Hero';
        const theme = storyParams?.theme || 'fantasy';
        
        let content = `THE ADVENTURES OF ${characterName.toUpperCase()}\n`;
        content += `Theme: ${theme.charAt(0).toUpperCase() + theme.slice(1)}\n`;
        content += `Generated on: ${new Date().toLocaleDateString()}\n`;
        content += `Total Chapters: ${storyHistory.length}\n`;
        content += '='.repeat(50) + '\n\n';

        storyHistory.forEach((story, index) => {
            content += `CHAPTER ${index + 1}\n`;
            content += '-'.repeat(20) + '\n\n';
            content += story.text + '\n\n';
            
            if (story.choices && story.choices.length > 0) {
                content += 'Choices made:\n';
                story.choices.forEach((choice, choiceIndex) => {
                    content += `${choiceIndex + 1}. ${choice.text}\n`;
                });
                content += '\n';
            }
            
            content += '\n';
        });

        content += '='.repeat(50) + '\n';
        content += 'Generated by Story Generator\n';
        
        return content;
    }

    generateHTMLContent(storyHistory, storyParams) {
        const characterName = storyParams?.characterName || 'Unknown Hero';
        const theme = storyParams?.theme || 'fantasy';
        
        let html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Adventures of ${this.escapeHtml(characterName)}</title>
    <style>
        body {
            font-family: 'Georgia', serif;
            line-height: 1.6;
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
            background: #f5f5f5;
            color: #333;
        }
        .header {
            text-align: center;
            margin-bottom: 3rem;
            padding: 2rem;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .title {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: #2c3e50;
        }
        .meta {
            color: #7f8c8d;
            font-style: italic;
        }
        .chapter {
            background: #fff;
            margin-bottom: 2rem;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .chapter-title {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 0.5rem;
        }
        .chapter-text {
            font-size: 1.1rem;
            line-height: 1.8;
            text-align: justify;
        }
        .choices {
            margin-top: 1.5rem;
            padding: 1rem;
            background: #ecf0f1;
            border-radius: 5px;
        }
        .choices h4 {
            margin-bottom: 0.5rem;
            color: #2c3e50;
        }
        .choices ul {
            margin: 0;
            padding-left: 1.5rem;
        }
        .choices li {
            margin-bottom: 0.5rem;
        }
        .footer {
            text-align: center;
            margin-top: 3rem;
            padding: 1rem;
            color: #7f8c8d;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1 class="title">The Adventures of ${this.escapeHtml(characterName)}</h1>
        <div class="meta">
            Theme: ${theme.charAt(0).toUpperCase() + theme.slice(1)} | 
            Generated on: ${new Date().toLocaleDateString()} | 
            Total Chapters: ${storyHistory.length}
        </div>
    </div>`;

        storyHistory.forEach((story, index) => {
            html += `
    <div class="chapter">
        <h2 class="chapter-title">Chapter ${index + 1}</h2>
        <div class="chapter-text">${this.escapeHtml(story.text)}</div>`;
        
            if (story.choices && story.choices.length > 0) {
                html += `
        <div class="choices">
            <h4>Available Choices:</h4>
            <ul>`;
            story.choices.forEach(choice => {
                html += `<li>${this.escapeHtml(choice.text)}</li>`;
            });
            html += `
            </ul>
        </div>`;
            }
            
            html += `
    </div>`;
        });

        html += `
    <div class="footer">
        Generated by Story Generator
    </div>
</body>
</html>`;

        return html;
    }

    generateFilename(storyParams, extension) {
        const characterName = storyParams?.characterName || 'Unknown_Hero';
        const theme = storyParams?.theme || 'fantasy';
        const timestamp = new Date().toISOString().slice(0, 10);
        
        const safeName = characterName.replace(/[^a-zA-Z0-9]/g, '_');
        return `${safeName}_${theme}_${timestamp}.${extension}`;
    }

    downloadFile(content, filename, mimeType) {
        try {
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = filename;
            link.style.display = 'none';
            
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Clean up the URL object
            setTimeout(() => URL.revokeObjectURL(url), 100);
            
            return true;
        } catch (error) {
            console.error('Failed to download file:', error);
            return false;
        }
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    isSupported() {
        return !!(window.Blob && window.URL && window.URL.createObjectURL);
    }

    getSupportedFormats() {
        return [...this.supportedFormats];
    }
}

window.ExportManager = ExportManager;
